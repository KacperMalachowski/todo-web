name: workflow

on:
  push:
    branches:
      - main
  # This workflow use Google Cloud Integration
  # to use ODIC authentication we need to use `pull_request_target`
  pull_request_target:
    branches:
      - main

# Set default permissions
permissions:
  contents: read

jobs:
  build:
    # Build the Docker image
    # Push it to the Google Artifact Registry
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    outputs:
      image: ${{ steps.metadata.outputs.tags }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        if: ${{ github.event_name == 'push' }}
        id: auth
        with:
          token_format: access_token
          project_id: ${{ vars.GCP_PROJECT_ID }}
          service_account: ${{ vars.GCP_SERVICE_ACCOUNT }}
          workload_identity_provider: ${{ vars.GCP_WORKLOAD_IDENTITY_PROVIDER }}

      - name: Configure Docker
        id: docker-auth
        if: ${{ github.event_name == 'push' }}
        uses: docker/login-action@v2
        with:
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}
          registry: ${{ vars.GCP_ARTIFACT_REGISTRY }}

      - name: Gather metadata
        id: metadata
        uses: docker/metadata-action@v4
        with:
          images: ${{ vars.GCP_ARTIFACT_REGISTRY_URI }}/github/todo-app
          tags: |
            type=raw,value=v{{date 'YYYYMMDD'}}-{{sha}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name == 'push' }}
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}

  deploy:
    # Deploy the Docker Image to the k8s cluster
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event_name == 'push' }}
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        id: auth
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}
          service_account: ${{ vars.GCP_SERVICE_ACCOUNT }}
          workload_identity_provider: ${{ vars.GCP_WORKLOAD_IDENTITY_PROVIDER }}

      - name: Download kubeconfig
        # Fetches k3s-kubeconfig from Google Cloud Secret Manager
        uses: google-github-actions/get-secretmanager-secrets@v2
        id: secrets
        with:
          secrets: |
            k3s-kubeconfig:${{ vars.GCP_PROJECT_ID }}/k3s-kubeconfig

      - name: Set KUBECONFIG
        run: |
          mkdir -p $HOME/.kube
          echo "${{ steps.secrets.outputs.k3s-kubeconfig }}" > $HOME/.kube/config

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4

      - name: Deploy to Kubernetes
        env:
          IMAGE: ${{ needs.build.outputs.image }}
          TOOL: github
        run: |
          envsubst < manifests/deployment.yaml | kubectl apply -f -
